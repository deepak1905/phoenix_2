-- VHDL Entity r2bfly_lib.R2_V6.symbol
--
-- Created:
--          by - konsta.UNKNOWN (GOSK)
--          at - 13:24:26 22.04.2005
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2004.1 (Build 41)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY R2_V6 IS
   PORT( 
      PQI     : IN     std_logic_vector (15 DOWNTO 0);
      PQ_R    : IN     std_logic_vector (15 DOWNTO 0);
      WRI     : IN     std_logic_vector (15 DOWNTO 0);
      add_sub : IN     std_logic;
      clk     : IN     std_logic;
      load    : IN     std_logic;
      load1   : IN     std_logic;
      load_P  : IN     std_logic;
      load_P2 : IN     std_logic;
      load_Q  : IN     std_logic;
      load_W  : IN     std_logic;
      rst     : IN     std_logic;
      sel     : IN     std_logic;
      imagout : OUT    std_logic_vector (15 DOWNTO 0);
      realout : OUT    std_logic_vector (15 DOWNTO 0)
   );

-- Declarations

END R2_V6 ;

--
-- VHDL Architecture r2bfly_lib.R2_V6.struct
--
-- Created:
--          by - konsta.UNKNOWN (GOSK)
--          at - 13:24:26 22.04.2005
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2004.1 (Build 41)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

--LIBRARY r2bfly_lib;

ARCHITECTURE struct OF R2_V6 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CD       : std_logic_vector(15 DOWNTO 0);
   SIGNAL QI       : std_logic_vector(15 DOWNTO 0);
   SIGNAL QR       : std_logic_vector(15 DOWNTO 0);
   SIGNAL dout     : std_logic_vector(15 DOWNTO 0);
   SIGNAL dout1    : std_logic_vector(15 DOWNTO 0);
   SIGNAL imagout1 : std_logic_vector(15 DOWNTO 0);
   SIGNAL q        : std_logic_vector(15 DOWNTO 0);
   SIGNAL q1       : std_logic_vector(15 DOWNTO 0);
   SIGNAL q2       : std_logic_vector(15 DOWNTO 0);
   SIGNAL q3       : std_logic_vector(15 DOWNTO 0);
   SIGNAL q4       : std_logic_vector(15 DOWNTO 0);
   SIGNAL q5       : std_logic_vector(15 DOWNTO 0);
   SIGNAL realout1 : std_logic_vector(15 DOWNTO 0);


   -- ModuleWare signal declarations(v1.4) for instance 'I3' of 'adff'
   SIGNAL mw_I3reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I4' of 'adff'
   SIGNAL mw_I4reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I5' of 'adff'
   SIGNAL mw_I5reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I6' of 'adff'
   SIGNAL mw_I6reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I7' of 'adff'
   SIGNAL mw_I7reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I8' of 'adff'
   SIGNAL mw_I8reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I9' of 'adff'
   SIGNAL mw_I9reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I10' of 'adff'
   SIGNAL mw_I10reg_cval : std_logic_vector(15 DOWNTO 0);

   -- ModuleWare signal declarations(v1.4) for instance 'I11' of 'adff'
   SIGNAL mw_I11reg_cval : std_logic_vector(15 DOWNTO 0);

   -- Component Declarations
   COMPONENT cmult1_v2_3
   PORT (
      A       : IN     std_logic_vector (15 DOWNTO 0);
      B       : IN     std_logic_vector (15 DOWNTO 0);
      CD      : IN     std_logic_vector (15 DOWNTO 0);
      clk     : IN     std_logic ;
      load    : IN     std_logic ;
      rst     : IN     std_logic ;
      imagout : OUT    std_logic_vector (15 DOWNTO 0);
      realout : OUT    std_logic_vector (15 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- synopsys translate_off
--   FOR ALL : cmult1_v2_3 USE ENTITY r2bfly_lib.cmult1_v2_3;
   -- synopsys translate_on


BEGIN

   -- ModuleWare code(v1.4) for instance 'I1' of 'addsub'
   I1combo_proc: PROCESS (dout, q, add_sub)
   VARIABLE temp_din0 : std_logic_vector(16 DOWNTO 0);
   VARIABLE temp_din1 : std_logic_vector(16 DOWNTO 0);
   VARIABLE sum : signed(16 DOWNTO 0);
   VARIABLE carry : std_logic;
   BEGIN
      temp_din0 := dout(15) & dout;
      temp_din1 := q(15) & q;
      carry := '0';
      IF (add_sub = '1' OR add_sub = 'H') THEN
         sum := signed(temp_din0) + signed(temp_din1) + carry;
      ELSE
         sum := signed(temp_din0) - signed(temp_din1) - carry;
      END IF;

      --Q14 fix
      sum := SHR(sum, "1");
      
      realout <= conv_std_logic_vector(sum(15 DOWNTO 0),16);
   END PROCESS I1combo_proc;

   -- ModuleWare code(v1.4) for instance 'I2' of 'addsub'
   I2combo_proc: PROCESS (dout1, q1, add_sub)
   VARIABLE temp_din0 : std_logic_vector(16 DOWNTO 0);
   VARIABLE temp_din1 : std_logic_vector(16 DOWNTO 0);
   VARIABLE sum : signed(16 DOWNTO 0);
   VARIABLE carry : std_logic;
   BEGIN
      temp_din0 := dout1(15) & dout1;
      temp_din1 := q1(15) & q1;
      carry := '0';
      IF (add_sub = '1' OR add_sub = 'H') THEN
         sum := signed(temp_din0) + signed(temp_din1) + carry;
      ELSE
         sum := signed(temp_din0) - signed(temp_din1) - carry;
      END IF;

      --Q14 fix
      sum := SHR(sum, "1");
      
      imagout <= conv_std_logic_vector(sum(15 DOWNTO 0),16);
   END PROCESS I2combo_proc;

   -- ModuleWare code(v1.4) for instance 'I3' of 'adff'
   QR <= mw_I3reg_cval;
   -- synopsys async_set_reset_local of I3seq_proc "rst"
   I3seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I3reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_Q = '1' OR load_Q = 'H') THEN
            mw_I3reg_cval <= PQ_R;
         END IF;
      END IF;
   END PROCESS I3seq_proc;

   -- ModuleWare code(v1.4) for instance 'I4' of 'adff'
   q2 <= mw_I4reg_cval;
   -- synopsys async_set_reset_local of I4seq_proc "rst"
   I4seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I4reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_P = '1' OR load_P = 'H') THEN
            mw_I4reg_cval <= PQ_R;
         END IF;
      END IF;
   END PROCESS I4seq_proc;

   -- ModuleWare code(v1.4) for instance 'I5' of 'adff'
   CD <= mw_I5reg_cval;
   -- synopsys async_set_reset_local of I5seq_proc "rst"
   I5seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I5reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_W = '1' OR load_W = 'H') THEN
            mw_I5reg_cval <= WRI;
         END IF;
      END IF;
   END PROCESS I5seq_proc;

   -- ModuleWare code(v1.4) for instance 'I6' of 'adff'
   QI <= mw_I6reg_cval;
   -- synopsys async_set_reset_local of I6seq_proc "rst"
   I6seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I6reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_Q = '1' OR load_Q = 'H') THEN
            mw_I6reg_cval <= PQI;
         END IF;
      END IF;
   END PROCESS I6seq_proc;

   -- ModuleWare code(v1.4) for instance 'I7' of 'adff'
   q4 <= mw_I7reg_cval;
   -- synopsys async_set_reset_local of I7seq_proc "rst"
   I7seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I7reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_P2 = '1' OR load_P2 = 'H') THEN
            mw_I7reg_cval <= PQI;
         END IF;
      END IF;
   END PROCESS I7seq_proc;

   -- ModuleWare code(v1.4) for instance 'I8' of 'adff'
   q5 <= mw_I8reg_cval;
   -- synopsys async_set_reset_local of I8seq_proc "rst"
   I8seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I8reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_P2 = '1' OR load_P2 = 'H') THEN
            mw_I8reg_cval <= PQ_R;
         END IF;
      END IF;
   END PROCESS I8seq_proc;

   -- ModuleWare code(v1.4) for instance 'I9' of 'adff'
   q3 <= mw_I9reg_cval;
   -- synopsys async_set_reset_local of I9seq_proc "rst"
   I9seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I9reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load_P = '1' OR load_P = 'H') THEN
            mw_I9reg_cval <= PQI;
         END IF;
      END IF;
   END PROCESS I9seq_proc;

   -- ModuleWare code(v1.4) for instance 'I10' of 'adff'
   q <= mw_I10reg_cval;
   -- synopsys async_set_reset_local of I10seq_proc "rst"
   I10seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I10reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load1 = '1' OR load1 = 'H') THEN
            mw_I10reg_cval <= realout1;
         END IF;
      END IF;
   END PROCESS I10seq_proc;

   -- ModuleWare code(v1.4) for instance 'I11' of 'adff'
   q1 <= mw_I11reg_cval;
   -- synopsys async_set_reset_local of I11seq_proc "rst"
   I11seq_proc: PROCESS (clk, rst)
   BEGIN
      IF (rst = '0' OR rst = 'L') THEN
         mw_I11reg_cval <= "0000000000000000";
      ELSIF (clk'EVENT AND clk='1') THEN
         IF (load1 = '1' OR load1 = 'H') THEN
            mw_I11reg_cval <= imagout1;
         END IF;
      END IF;
   END PROCESS I11seq_proc;

   -- ModuleWare code(v1.4) for instance 'I12' of 'mux'
   I12combo_proc: PROCESS(q3, q4, sel)
   BEGIN
      CASE sel IS
      WHEN '0'|'L' => dout1 <= q3;
      WHEN '1'|'H' => dout1 <= q4;
      WHEN OTHERS => dout1 <= (OTHERS => 'X');
      END CASE;
   END PROCESS I12combo_proc;

   -- ModuleWare code(v1.4) for instance 'I13' of 'mux'
   I13combo_proc: PROCESS(q2, q5, sel)
   BEGIN
      CASE sel IS
      WHEN '0'|'L' => dout <= q2;
      WHEN '1'|'H' => dout <= q5;
      WHEN OTHERS => dout <= (OTHERS => 'X');
      END CASE;
   END PROCESS I13combo_proc;

   -- Instance port mappings.
   I0 : cmult1_v2_3
      PORT MAP (
         A       => QR,
         B       => QI,
         CD      => CD,
         clk     => clk,
         load    => load,
         rst     => rst,
         imagout => imagout1,
         realout => realout1
      );

END struct;
